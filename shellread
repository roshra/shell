# shell script

**************************************************************
Variable
No need for space between two entities
while adding up variables, need to be in double quotes
MYVAR1=rosh
MYVAR2=ravi
fullname="$MYVAR1 $MYVAR2"

Echo
-n would make omit trailing line and end up on same line
echo -n "enter name: "

printf
printf "my name is %s %s" rosh ravi

printf "my name is %s %s \a" rosh ravi = \a bell
printf "my name is %s %s \b" rosh ravi =  \b backspace
printf "my name is %s %s \c" rosh ravi = \c supress final newline
printf "my name is %s %s \f" rosh ravi = \f formfeed
printf "my name is %s %s \n" rosh ravi = \n newline
printf "my name is %s %s \r" rosh ravi = \r carriage return
printf "my name is %s %s \t" rosh ravi = \t horizontal tab
printf "my name is %s %s \v" rosh ravi = \v Vertical tab

Special files
/dev/null , also known as bit bucket
data sent to this file is thrown away by system
useful when you think the output is not needed
ls /dev/null

/dev/tty
unix automatically send it to real terminal:


printf "Enter pass : "
stty -echo         # would turnoff ehco of pass
read pass < /dev/tty

set +x , turns on tracing


**************************************************************
Variables 
Linux shell two kinds of variables
1. system variables
BASH=/bin/bash
COLUMNS=80
HOME=/home/vivek
PATH=/usr/bin:/sbin/
USERNAME=rosh

How to print variables
echo $BASH
echo $COLUMNS
echo $HOME

2. user defines variables (UDV)
syntax 
variable name=value
example:
good example : no=10
bad example  : 10=no
To define variable 'vech' having value Bus
vech=Bus
To define variable called n having value 10
n=10

Rules for naming system defines and system variables
1. variables must begin with alphanumeric character or underscor character _
HOME
SYSTEM_VERSION
vech
no

2. Dont put space in either side of the equal sign when assigningvalue to variable
good example = no=10
bad example = no = 10

3. Varaibles are case sensitive 
no=10
NO=10

4. You can define NULL variables as follows (NULL variables are variables with no value ar time of definition)
vech=
vech=""
print variable : echo vech will give NULL

5. Do not use ?, * etc to name of your variable names


print variables :
syntax 
$variablename
vech=Bus
n=10
echo $vech
echo n


printf "my name is %s %s \n" rosh ravi


Exercise:
Q.1.How to Define variable x with value 10 and print it on screen

bash-3.2$ x=10
bash-3.2$ echo $x
10

Q.2.How to Define variable xn with value Rani and print it on screen
xn=Rani
echo $xn

Q.3.How to print sum of two numbers, let's say 6 and 3?
bash-3.2$ x=6
bash-3.2$ y=3
bash-3.2$ sum=$(($x+$y))
bash-3.2$ echo $sum
9

Q.4.How to define two variable x=20, y=5 and then to print division of x and y (i.e. x/y)
bash-3.2$ x=20
bash-3.2$ y=5
bash-3.2$ div=$(($x/$y))
bash-3.2$ echo $div
4

Q.5.Modify above and store division of x and y to variable called z
bash-3.2$ x=20
bash-3.2$ y=5
bash-3.2$ div=$(($x/$y))
bash-3.2$ echo $div
4
bash-3.2$ z=$div
bash-3.2$ echo $z
4

Q.6 Point out error if any in following script


$ vi variscript
#
#
# Script to test MY knowledge about variables!
#
myname=Vivek
myos = TroubleOS
myno=5
echo "My name is $myname"
echo "My os is $myos"
echo "My number is myno, can you see this number"


**************************************************************
echo command
echo -e "An apple a day keeps away \a\t\tdoctor\n"

-e = Enable interpretation is following backlasg escaped characters in the string
\a = alert(bell)
\b = backspace
\c = supress trailing new line
\n = new line
\r = carriage return
\t = horizontal tab
\\ = backslash

**************************************************************
Shell Arthmetic

Syntax:
expr op1 math-operator op2

Examples: 
$ expr 1 + 3
$ expr 2 - 1
$ expr 10 / 2
$ expr 20 % 3
$ expr 10 \* 3
$ echo `expr 6 + 3`

Note:
expr 20 %3 - Remainder read as 20 mod 3 and remainder is 2.
expr 10 \* 3 - Multiplication use \* and not * since its wild card.

For the last statement not the following points

(1) First, before expr keyword we used ` (back quote) sign not the (single quote i.e. ') sign. Back quote is generally found on the key under tilde (~) on PC keyboard OR to the above of TAB key.

(2) Second, expr is also end with ` i.e. back quote.

(3) Here expr 6 + 3 is evaluated to 9, then echo command prints 9 as sum

(4) Here if you use double quote or single quote, it will NOT work
For e.g.
$ echo "expr 6 + 3" # It will print expr 6 + 3
$ echo 'expr 6 + 3' # It will print expr 6 + 3


**************************************************************
More about Quotes
bash-3.2$ echo "today is `date`"
today is Fri Aug  2 03:09:26 IST 2019


Double quotes = removes meaning of that characters except 
\ and $
Single Quotes = Whatever is enclosed in single quotes remains 
unchanged  
Back Quotes = `back quotes` to execite command

**************************************************************
Exit Status
1. If return value is zero (0), command is successful
2. If return value is nonzero, command is not successful 

rm unknownfile; echo $?
rm: unknownfile: No such file or directory
1

bash-3.2$ ls;echo $?
dos-file.txt	trace.sh	variablescript
shellread	unix-file.txt
0

**************************************************************

The read Statement

Use to get input from keyboard and store data to variable
syntax:
read variable1, variabl2,....variableN




**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************




**************************************************************
Website :
http://www.freeos.com/guides/lsst/ch01sec11.html


Book :classic Shell scripting 
arnold Robbns and Nelson H F Beebee
chapter 3
searching and substituation

**************************************************************
